A non-empty array A consisting of N integers is given. The consecutive elements of array A represent consecutive cars on a road.

Array A contains only 0s and/or 1s:

0 represents a car traveling east,
1 represents a car traveling west.
The goal is to count passing cars. We say that a pair of cars (P, Q), where 0 ≤ P < Q < N, is passing when P is traveling to the east and Q is traveling to the west.

For example, consider array A such that:

  A[0] = 0
  A[1] = 1
  A[2] = 0
  A[3] = 1
  A[4] = 1
We have five pairs of passing cars: (0, 1), (0, 3), (0, 4), (2, 3), (2, 4).

Write a function:

int solution(vector<int> &A);

that, given a non-empty array A of N integers, returns the number of pairs of passing cars.

The function should return −1 if the number of pairs of passing cars exceeds 1,000,000,000.

For example, given:

  A[0] = 0
  A[1] = 1
  A[2] = 0
  A[3] = 1
  A[4] = 1
the function should return 5, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer that can have one of the following values: 0, 1.

ChatGPT explanation

One efficient algorithm to solve this problem is as follows:

Initialize a counter variable count to 0.
Initialize a variable west_cars to 0.
Loop through all elements of A.
For each element x of A, if it is equal to 0, increment west_cars. If it is equal to 1, add west_cars to count.
If count exceeds 1,000,000,000, return -1 as the answer.
After the loop, return count as the answer.
The idea behind this algorithm is that we can count the number of pairs of passing cars by keeping track of the number of westbound cars that have been encountered so far, and adding this number to the count whenever we encounter an eastbound car. The time complexity of this algorithm is O(N), which is optimal for this problem.

Note that we need to check for the condition count > 1000000000 after each iteration, to ensure that we return -1 as soon as the condition is met. If we wait until the end of the loop to check this condition, the algorithm would take longer than necessary in cases where the condition is met early in the loop.