A non-empty array A consisting of N integers is given.

A permutation is a sequence containing each element from 1 to N once, and only once.

For example, array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
is a permutation, but array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
is not a permutation, because value 2 is missing.

The goal is to check whether array A is a permutation.

Write a function:

int solution(vector<int> &A);

that, given an array A, returns 1 if array A is a permutation and 0 if it is not.

For example, given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
the function should return 1.

Given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
the function should return 0.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [1..1,000,000,000].

Chat GPT explanation

One efficient algorithm to solve this problem is as follows:

Create a boolean array B of size N, initialized with false values.
Loop through all elements of A.
For each element x of A, check if it is within the range [1, N] and if B[x-1] is false. If both conditions are true, set B[x-1] to true.
After the loop, check if all elements of B are true. If yes, return 1 (permutation), otherwise return 0 (not a permutation).
The time complexity of this algorithm is O(N), which is optimal for this problem.